* Kubernets Monitoring                                              :Concept:
:PROPERTIES:
:type:     monitoring
:END:

#+BEGIN_HTML
<a href="https://github.com/dennyzhang/challenges-k8s-monitoring"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>

<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>

<br/><br/>
<a href="http://makeapullrequest.com" target="_blank" rel="nofollow"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs Welcome"/></a>
#+END_HTML

Blog URL: https://kubernetes.dennyzhang.com/challenges-k8s-monitoring, Category: [[https://kubernetes.dennyzhang.com/category/concept][concept]]

** Summary
| Name                           | Summary                                     |
|--------------------------------+---------------------------------------------|
| Metrics Defined By Metrics API | [[https://github.com/kubernetes/metrics/blob/5c7f1617ad5e9ceada708f5be3f93918d7b724a4/pkg/apis/metrics/v1beta1/types.go][kubernets/pkg/apis/metrics/v1beta1/types.go]] |
** [#A] Questions
*** Why community want to switch from heapster to metric server?
- Heapster serves the API using go http library which doesn't offer a number of functionality that is offered by Kubernetes API server like authorization/authentication or client generation. ([[https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/metrics-server.md#scalability-limitations][link]])
- Heapster is not compatible with Prometheus. It assumes that the data store is a bare time-series database and allows a direct write path to it. But Prometheus is a pull based model.
- Heapster serves the API using go http library which doesn't offer a number of functionality that is offered by Kubernetes API server like authorization/authentication or client generation. ([[https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/metrics-server.md#current-status][link]]
- Design problem makes heapster hard to maintain.

https://brancz.com/2018/01/05/prometheus-vs-heapster-vs-kubernetes-metrics-apis/

In Kubernetes 1.12, heapster will be tenatively removed. In 1.13, it will be moved to kubernetes-retired organization. ([[https://github.com/kubernetes/heapster/blob/master/docs/deprecation.md][link]])

Consider using metrics-server and a third party metrics pipeline to gather Prometheus-format metrics instead.
*** How I can send my pod/application metrics? Metric server won't be a good idea?
*** Data storage for prometheus
** k8s monitoring architecture
- a per-node agent and a cluster-level aggregator ([[https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/monitoring_architecture.md][link]])
- Metrics: system metrics and service metrics. Futhermore, system metrics are divided into core metrics and non-core metrics. ([[https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/monitoring_architecture.md#terminology][link]])
** Metric Server
*** Basic Intro
1. Metric server is sort of a stripped-down version of Heapster
- The goal for the effort is to provide resource usage metrics for pods and nodes through the API server. ([[https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/resource-metrics-api.md#goal][link]])
- It will be a cluster level component which periodically scrapes metrics from all Kubernetes nodes served by Kubelet through Summary API. Then metrics will be aggregated, stored in memory (see Scalability limitations) and served in Metrics API format. ([[https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/metrics-server.md#design][link]])
**** local notes                                                   :noexport:
Resource Metrics API is an effort to provide a first-class Kubernetes API (stable, versioned, discoverable, available through apiserver and with client support) that serves resource usage metrics for pods and nodes.

- metric server is sort of a stripped-down version of Heapster
- The metrics-server will collect "Core" metrics from cAdvisor APIs (currently embedded in the kubelet) and store them in memory as opposed to in etcd. 
- The metrics-server will provide a supported API for feeding schedulers and horizontal pod auto-scalers
- All other Kubernetes components will supply their own metrics in a Prometheus format

Metrics Server is a cluster-wide aggregator of resource usage data. 

Metrics Server registered in the main API server through Kubernetes aggregator.

The metrics-server will provide a much needed official API for the internal components of Kubernetes to make decisions about the utilization and performance of the cluster.

- HPA(Horizontal Pod Autoscaler) need input to do good auto-scaling

https://kubernetes.io/docs/tasks/debug-application-cluster/core-metrics-pipeline/
| Name           | Summary                                                           |
|----------------+-------------------------------------------------------------------|
| Core metrics   | node/container level metrics; CPU, memory, disk and network, etc. |
| Custom metrics | refers to application metrics, e.g. HTTP request rate.            |

Today (Kubernetes 1.7), there are several sources of metrics within a Kubernetes cluster
| Name           | Summary                                                             |
|----------------+---------------------------------------------------------------------|
| Heapster       | k8s add-on                                                          |
| Cadvisor       | a standalone container/node metrics collection and monitoring tool. |
| Kubernetes API | does not track metrics. But can get real time metrics               |
*** Design Goals
- The data for a given set of pods (defined either by pod list or label selector) should be accessible in one request due to performance issues. ([[https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/resource-metrics-api.md#goal][link]])
*** Limitations
- Metrics Server supports up to 30 pods per cluster node. (From [[https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/metrics-server][link]])
- Assume to collect up to 10 metrics from each pod and node running in a cluster (From [[https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/metrics-server.md#scalability-limitations][link]])
*** TODO What is API aggregation layer in metric server?
https://github.com/kubernetes/apiserver
*** TODO try metric server in minikube
 https://docs.giantswarm.io/guides/kubernetes-heapster/

 http://192.168.99.102:30000/metrics

*** TODO How to query metric server manually
** kube-state-metrics
- Useful links
#+BEGIN_EXAMPLE
https://brancz.com/2017/11/13/kube-state-metrics-the-past-the-present-and-the-future/
#+END_EXAMPLE
** heapster
Heapster is an add on to Kubernetes that collects and forwards both node, namespace, pod and container level metrics to one or more "sinks" (e.g. InfluxDB). 

It also provides REST endpoints to gather those metrics. The metrics are constrained to CPU, filesystem, memory, network and uptime.

Heapster queries the kubelet for its data.

Today, heapster is the source of the time-series data for the Kubernetes Dashboard.

- Useful links
#+BEGIN_EXAMPLE
https://brancz.com/2017/11/13/kube-state-metrics-the-past-the-present-and-the-future/
#+END_EXAMPLE
** [#A] Prometheus
** #  --8<-------------------------- separator ------------------------>8-- :noexport:
** Cadvisor
Cadvisor monitors node and container core metrics in addition to container events.
It natively provides a Prometheus metrics endpoint
The Kubernetes kublet has an embedded Cadvisor that only exposes the metrics, not the events.
** More Resources
 License: Code is licensed under [[https://www.dennyzhang.com/wp-content/mit_license.txt][MIT License]].
#+BEGIN_EXAMPLE
https://github.com/kubernetes-incubator/metrics-server
https://github.com/kubernetes-incubator/metrics-server/tree/master/deploy/1.8%2B
https://blog.freshtracks.io/what-is-the-the-new-kubernetes-metrics-server-849c16aa01f4
https://blog.outlyer.com/monitoring-kubernetes-with-heapster-and-prometheus
https://www.outcoldman.com/en/archive/2017/07/09/kubernetes-monitoring-resources/
#+END_EXAMPLE

 #+BEGIN_HTML
 <a href="https://www.dennyzhang.com"><img align="right" width="201" height="268" src="https://raw.githubusercontent.com/USDevOps/mywechat-slack-group/master/images/denny_201706.png"></a>
 <a href="https://www.dennyzhang.com"><img align="right" src="https://raw.githubusercontent.com/USDevOps/mywechat-slack-group/master/images/dns_small.png"></a>

 <a href="https://www.linkedin.com/in/dennyzhang001"><img align="bottom" src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a>
 <a href="https://github.com/dennyzhang"><img align="bottom"src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a>
 <a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img align="bottom" src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a>
 #+END_HTML
** org-mode configuration                                          :noexport:
 #+STARTUP: overview customtime noalign logdone
 #+DESCRIPTION: 
 #+KEYWORDS: 
 #+AUTHOR: Denny Zhang
 #+EMAIL:  denny@dennyzhang.com
 #+TAGS: noexport(n)
 #+PRIORITIES: A D C
 #+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
 #+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
 #+EXPORT_EXCLUDE_TAGS: exclude noexport
 #+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
 #+LINK_UP:   
 #+LINK_HOME: 
* [#A] k8s metric server                                 :noexport:IMPORTANT:
** TODO Key scenarios of metric server
The metrics-server will provide a much needed official API for the internal components of Kubernetes to make decisions about the utilization and performance of the cluster.

- HPA(Horizontal Pod Autoscaler) need input to do good auto-scaling
** TODO There are plans for an "Infrastore", a Kubernetes component that keeps historical data and events
** TODO kube-aggregator
** TODO what is promethues format?
#+BEGIN_EXAMPLE
Denny Zhang [12:34 AM]
An easy introduction about k8s metric server. (It will replace heapster)

https://blog.freshtracks.io/what-is-the-the-new-kubernetes-metrics-server-849c16aa01f4

> All other Kubernetes components will supply their own metrics in a Prometheus format

In logging domain, we can say `syslog` is the standard format

In metric domain, maybe we can choose `prometheus` as the standard format.
#+END_EXAMPLE
** Metrics Use Cases
https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/resource-metrics-api.md

https://docs.giantswarm.io/guides/kubernetes-heapster/

#+BEGIN_EXAMPLE
Horizontal Pod Autoscaler: It scales pods automatically based on CPU or custom metrics (not explained here). More information here.
Kubectl top: The command top of our beloved Kubernetes CLI display metrics directly in the terminal.
Kubernetes dashboard: See Pod and Nodes metrics integrated into the main Kubernetes UI dashboard. More info here
Scheduler: In the future Core Metrics will be considered in order to schedule best-effort Pods.
#+END_EXAMPLE
* DONE "kubectl top" need heapster                                 :noexport:
  CLOSED: [2018-07-31 Tue 16:40]
#+BEGIN_EXAMPLE
kubo@jumper:~$ kubectl top pod --all-namespaces --containers=true
Error from server (ServiceUnavailable): the server is currently unable to handle the request (get services http:heapster:)
#+END_EXAMPLE
* Kubernetes Monitoring: prometheus, heapster                      :noexport:
https://deis.com/blog/2016/monitoring-kubernetes-with-heapster/
https://groups.google.com/forum/#!topic/prometheus-developers/3zq4oD7if3s

Since we're extending heapster in various ways for auto-scaling, and
we're about to add support for collecting and aggregating custom
metrics, we should decide and document what the boundaries for
heapster's responsibilities should be. In particular, I don't want it
to grow into a general-purpose application and/or infrastructure
monitoring, dashboarding, and alerting system, such as
Prometheus. There are many such systems, and we shouldn't compete with
them.

#+BEGIN_EXAMPLE
Heapster is a competing monitoring system.

 * Heapster is limited to Kuberenetes container metrics, it is not general use.
 * Heapster only provides metrics back as REST, it does not have a query language. (atleast that I could find)
 * Heapster does not have any form of alerting.
Basically, if you have Prometheus, there's almost no reason to use heapster.
#+END_EXAMPLE
** What is the relationship of heapster and prometheus
https://groups.google.com/forum/#!topic/prometheus-developers/3zq4oD7if3s
https://github.com/kubernetes/heapster/issues/665
* TODO try to talk with controller manager metrics                 :noexport:
https://kubernetes.io/docs/concepts/cluster-administration/controller-metrics/
